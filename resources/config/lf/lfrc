# interpreter for shell commands
set shell sh
# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'
# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"
# leave some space at the top and the bottom of the screen
set scrolloff 10
# enable borders
set drawbox
# enable icons (nerdfonts)
set icons true
# preview script
set previewer ~/.config/lf/pv.sh

### functions

# command to open files
cmd open ${{
    test -L $f && f=$(readlink -f $f)
    case $(file --mime-type $f -b) in
        text/*|application/json) $EDITOR $fx;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# wallpaper script
cmd ranwall "$1"

# custom mkdir so i don't need to use quotes
cmd mkdir %IFS=" "; mkdir -- "$*"

# trash-cli functionality
cmd trash %trash-put $fx

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

### bindings
map . set hidden!
map <enter> shell
map <c-r> reload
cmap <tab> cmd-menu-complete
cmap <backtab> cmd-menu-complete-back
# unbind keys
map f
map F
# put lf in the backgroung (bg), type 'fg' to bring it back
map <c-z> $ kill -STOP $PPID
# copy the selected file/directory into the clipboard (needs xclip)
map Y $printf "%s" "$fx" | xclip -selection clipboard
# create a folder
map fd push :mkdir<space> 
# create a text file with neovim
map ft push $nvim<space> 
# open file with mpv
map fv $mpv $f 
# symlinkani script
map fl $symlinkani $f
# script to convert png to jpg
map fc $conimg $f
# trash-cli
map <delete> trash
# bulk rename
map R $vidir 
# wallpaper script
map b $ranwall $f 
# execute current file (must be executable)
map x $$f
map X !$f
# dedicated keys for file opener actions (needs 'mimeopen')
map o &mimeopen $f
map O $mimeopen --ask $f
# quickly move between directories
map gD cd ~/documents
map gd cd ~/downloads
map gi cd ~/images
map gm cd ~/music
map gs cd ~/storage
map gv cd ~/videos
map gt cd ~/torrent
map gg cd ~/git
map gc cd ~/.config
map gl cd ~/.local
map gb cd ~/.local/bin
